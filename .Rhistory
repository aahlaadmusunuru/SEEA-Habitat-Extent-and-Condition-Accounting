align-items:center;"),
),
tags$div(
style = "position:absolute; top:120px; left:30px;",
uiOutput("Opening_stock_Condition"),
actionButton("RefreshPlotHabitateOpeningYear", "", icon("refresh"),
style = "background-color:black;color:white;
height:40px;width:40px;border:none;
padding:0;display:flex;justify-content:center;
align-items:center;"),
div(style = "max-height: 250px; max-width: 400px; overflow: auto;",
),
tags$style(
HTML("
.btn-download:hover {
color: black;
background-color: white;
}
")
)
)
),
tabPanel(
"Opening Statistics",
div(class = 'main_menu_theme',style="height: 760px; padding-top: 20px; padding-bottom: 20px; overflow-y: scroll;",
div(class = 'main_habitates',style="padding-top:5px;" ,
tags$h4(
class = "gray-heading",   style = 'font-size: 18px;',
"Overall condition accounting table :",
),
tags$p(style = "justify-content:center;",
'The overall condition accounting table provides information about the condition of the entire geographical area. The minimum value represents the lowest observed condition, the maximum value represents the highest observed condition, and the mean value represents the average condition across the area. The standard deviation indicates the degree of variation or spread in the condition values.'
),
downloadButton(
"Condition_Opening_Total_Step_3",
"",
icon("download"),
style = "background-color:black;color:white;
height:40px;width:40px;border:none;
padding:0;display:flex;justify-content:center;
align-items:center;"
),
tags$br(),
tabBox(
title = tags$img(
src = "thermometer.png",
height = "30px",
width = "30px"
),
width = "100%",
tabPanel('Condition Stats',
tags$style("#min-tab-content {overflow-x: auto; overflow-y: auto; width: 100%; height: 100%;}"),  # Set overflow and dimensions for min tab content
dataTableOutput("Condition_Opening"),
)
),
div(
style = "display: flex; align-items: center;",
p(
style = "padding: 10px;justify-content:center;
",
"Table-1: Condition stasticies  (Min, Mean, Max and SD)."
)
)
)
)
)
) ,
tabBox(
title = tags$img(src = "thermometer.png", height = "30px", width = "30px"),
tabPanel("Closing",
leafletOutput("Closing_stock_Habitent_condition", height = "760px")%>% withSpinner(color="#0dc5c1"),
tags$div(
style = "position:absolute; top:180px; right:30px;",
downloadButton("Closing_Report", "", icon("download"),
style = "background-color:black;color:white;
height:40px;width:40px;border:none;
padding:0;display:flex;justify-content:center;
align-items:center;"),
),
tags$div(
style = "position:absolute; top:120px; left:30px;",
uiOutput("Closing_stock_Condition"),
actionButton("RefreshPlotHabitateClosingYear", "", icon("refresh"),
style = "background-color:black;color:white;
height:40px;width:40px;border:none;
padding:0;display:flex;justify-content:center;
align-items:center;"),
div(style = "max-height: 250px; max-width: 400px; overflow: auto;",
),
tags$style(
HTML("
.btn-download:hover {
color: black;
background-color: white;
}
")
)
)
),
tabPanel(
"Closing Statistics",
div(class = 'main_menu_theme',style="height: 760px; padding-top: 20px; padding-bottom: 20px; overflow-y: scroll;",
div(class = 'main_habitates',style="padding-top:5px;" ,
tags$h4(
class = "gray-heading",   style = 'font-size: 18px;',
"Overall condition accounting table :",
),
tags$p(style = "justify-content:center;",
'The overall condition accounting table provides information about the condition of the entire geographical area. The minimum value represents the lowest observed condition, the maximum value represents the highest observed condition, and the mean value represents the average condition across the area. The standard deviation indicates the degree of variation or spread in the condition values.'
),
downloadButton(
"Condition_Closing_Total_Step_3",
"",
icon("download"),
style = "background-color:black;color:white;
height:40px;width:40px;border:none;
padding:0;display:flex;justify-content:center;
align-items:center;"
),
tags$br(),
tabBox(
title = tags$img(
src = "thermometer.png",
height = "30px",
width = "30px"
),
width = "100%",
tabPanel('Condition Stats',
tags$style("#min-tab-content {overflow-x: auto; overflow-y: auto; width: 100%; height: 100%;}"),  # Set overflow and dimensions for min tab content
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
rm(list = ls())
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
https://youtu.be/Fu8sbaYvK70?si=Ij_LWdeIvGE-fWFO
runApp()
runApp()
http://127.0.0.1:5067/
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Habitate Condition Change Statistics
runApp()
habitentes_DT
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
# Define the UI
ui <- fluidPage(
downloadButton("User_Manual", "Download User Manual")
)
# Define the server logic
server <- function(input, output) {
# Serve files from the specified directory
addResourcePath("myfiles", "D:/Habitat Extent and Condition Accounting Tool/www")
# Define the download handler
output$User_Manual <- downloadHandler(
filename = function() {
"README.html"
},
content = function(file) {
file.copy("myfiles/README.html", file)
}
)
}
# Run the application
shinyApp(ui, server)
rm(list = ls())
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
Elastrate
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Condetion_Habitent_Tranformaion_Markers_map
source("~/.active-rstudio-document", echo=TRUE)
runApp()
runApp()
Markers_2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
